{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","main.worker.ts"],"names":["convertWebGLCoord2Canvas","c","size","App","useState","timeElapsed","setTimeElapsed","loading","setLoading","useEffect","canvas","document","createElement","navigator","gpu","window","worker","Worker","offscreen","transferControlToOffscreen","timeStart","performance","now","postMessage","addEventListener","e","data","numParticles","edgeIndexBufferData","finalParticleData","Canvas","container","width","height","i","length","x1","y1","x2","y2","addGroup","addShape","attrs","stroke","lineWidth","x","y","r","fill","renderCircles","vertexNum","vertexEdgeData","style","maxWidth","margin","spinning","tip","href","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oNAyGA,SAASA,EAAyBC,EAAWC,GAC3C,OAASD,EAAI,GAAK,EAAKC,EAGVC,MAnGf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KA2Bb,OAvBAC,qBAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UACtC,IACGC,UAAUC,KACX,oBAAqBC,QACrB,+BAAgCL,EAChC,CACA,IAAMM,EAAS,IAAIC,IACbC,EAAYR,EAAOS,6BACnBC,EAAYL,OAAOM,YAAYC,MACrCN,EAAOO,YAAY,CAAEb,OAAQQ,GAAa,CAACA,IAC3CF,EAAOQ,iBAAiB,WAAW,SAACC,GAElCnB,EAAeS,OAAOM,YAAYC,MAAQF,GAC1CZ,GAAW,GAH2C,MAKKiB,EAAEC,MA2BrE,SACEC,EACAC,EACAC,GASA,IAPA,IAAMnB,EAAS,IAAIoB,SAAO,CACxBC,UAAW,YACXC,MAxDiB,IAyDjBC,OA1DkB,MA8DXC,EAAI,EAAGA,EAAIN,EAAoBO,OAAQD,GAAK,EAAG,CACtD,IAAME,EAAKP,EAA2C,EAAzBD,EAAoBM,IAC3CG,EAAKR,EAA2C,EAAzBD,EAAoBM,GAAS,GACpDI,EAAKT,EAA+C,EAA7BD,EAAoBM,EAAI,IAC/CK,EAAKV,EAA+C,EAA7BD,EAAoBM,EAAI,GAAS,GAChDxB,EAAO8B,WACfC,SAAS,OAAQ,CACrBC,MAAO,CACLN,GAAIpC,EAAyBoC,EArEhB,KAsEbC,GAAIrC,EAAyBqC,EAvEf,KAwEdC,GAAItC,EAAyBsC,EAvEhB,KAwEbC,GAAIvC,EAAyBuC,EAzEf,KA0EdI,OAAQ,UACRC,UAAW,KAMjB,IAAK,IAAIV,EAAI,EAAGA,EAAmB,EAAfP,EAAkBO,GAAK,EAAG,CAC5C,IAAMW,EAAIhB,EAAkBK,GACtBY,EAAIjB,EAAkBK,EAAI,GAClBxB,EAAO8B,WACfC,SAAS,SAAU,CACvBC,MAAO,CACLG,EAAG7C,EAAyB6C,EAtFf,KAuFbC,EAAG9C,EAAyB8C,EAxFd,KAyFdC,EAAG,EACHC,KAAM,MACNL,OAAQ,OACRC,UAAW,MApEXK,CANsD,EAK9CC,UAL8C,EAKnCtB,oBALmC,EAKduB,sBAM3C,IAED,yBAAKC,MAAO,CACVC,SAAU,IACVC,OAAQ,eAER,kBAAC,IAAD,CAAMC,SAAUhD,EAASiD,IAAI,kHAC3B,8CAAoBnD,EAAc,IAAlC,KACA,oDACuB,IACrB,uBAAGoD,KAAK,iFAAR,WAEK,IAJP,SAOA,yBAAKC,GAAG,iBCvCIC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASuD,eAAe,SDgIpB,kBAAmBrD,WACrBA,UAAUsD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEjJ5BC,EAAOC,QAAU,WACf,OAAO,IAAI5D,OAAO,IAA0B,oC","file":"static/js/main.d394d87c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Spin } from 'antd';\nimport './App.css';\nimport { Canvas } from '@antv/g-canvas';\n// @ts-ignore\nimport Worker from './main.worker.ts';\n\nconst CANVAS_HEIGHT = 600;\nconst CANVAS_WIDTH = 600;\n\nfunction App() {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    if (\n      !navigator.gpu && // WebGPU 还不支持 OffscreenCanvas\n      'OffscreenCanvas' in window &&\n      'transferControlToOffscreen' in canvas\n    ) { \n      const worker = new Worker();\n      const offscreen = canvas.transferControlToOffscreen();\n      const timeStart = window.performance.now();\n      worker.postMessage({ canvas: offscreen }, [offscreen]);\n      worker.addEventListener('message', (e: MessageEvent) => {\n\n        setTimeElapsed(window.performance.now() - timeStart);\n        setLoading(false);\n\n        const { vertexNum, edgeIndexBufferData, vertexEdgeData } = e.data;\n        renderCircles(vertexNum, edgeIndexBufferData, vertexEdgeData);\n      });\n    } else {\n\n    }\n  }, []);\n  return (\n    <div style={{\n      maxWidth: 700,\n      margin: '100px auto',\n    }}>\n      <Spin spinning={loading} tip=\"主线程空闲中，等待 Worker 线程返回计算结果\">\n        <div>Elapsed time: {timeElapsed / 1000}s</div>\n        <div>\n          Ported from the same{' '}\n          <a href=\"https://g6.antv.vision/en/examples/net/furchtermanLayout#fruchtermanWebWorker\">\n            example\n          </a>{' '}\n          in G6\n        </div>\n        <div id=\"container\" />\n      </Spin>\n    </div>\n  );\n}\n\nfunction renderCircles(\n  numParticles: number,\n  edgeIndexBufferData: number[],\n  finalParticleData: Float32Array,\n) {\n  const canvas = new Canvas({\n    container: 'container',\n    width: CANVAS_WIDTH,\n    height: CANVAS_HEIGHT,\n  });\n\n  // draw edges\n  for (let i = 0; i < edgeIndexBufferData.length; i += 2) {\n    const x1 = finalParticleData[edgeIndexBufferData[i] * 4];\n    const y1 = finalParticleData[edgeIndexBufferData[i] * 4 + 1];\n    const x2 = finalParticleData[edgeIndexBufferData[i + 1] * 4];\n    const y2 = finalParticleData[edgeIndexBufferData[i + 1] * 4 + 1];\n    const group = canvas.addGroup();\n    group.addShape('line', {\n      attrs: {\n        x1: convertWebGLCoord2Canvas(x1, CANVAS_WIDTH),\n        y1: convertWebGLCoord2Canvas(y1, CANVAS_HEIGHT),\n        x2: convertWebGLCoord2Canvas(x2, CANVAS_WIDTH),\n        y2: convertWebGLCoord2Canvas(y2, CANVAS_HEIGHT),\n        stroke: '#1890FF',\n        lineWidth: 1,\n      },\n    });\n  }\n\n  // draw nodes\n  for (let i = 0; i < numParticles * 4; i += 4) {\n    const x = finalParticleData[i];\n    const y = finalParticleData[i + 1];\n    const group = canvas.addGroup();\n    group.addShape('circle', {\n      attrs: {\n        x: convertWebGLCoord2Canvas(x, CANVAS_WIDTH),\n        y: convertWebGLCoord2Canvas(y, CANVAS_HEIGHT),\n        r: 5,\n        fill: 'red',\n        stroke: 'blue',\n        lineWidth: 2,\n      },\n    });\n  }\n}\n\nfunction convertWebGLCoord2Canvas(c: number, size: number) {\n  return ((c + 1) / 2) * size;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"5988c760cd7a60008931.worker.js\");\n};"],"sourceRoot":""}